/*
 * @(#)RootPaneTest.java
 * Quaqua Look and Feel. Copyright Â© 2020 Werner Randelshofer, Switzerland. MIT License.
 */

package test;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JRootPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import java.awt.GridBagConstraints;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * RootPaneTest.
 *
 * @author Werner Randelshofer
 * @version 1.0 June 6, 2005 Created.
 */
public class RootPaneTest extends javax.swing.JPanel {

    /**
     * Creates a new instance.
     */
    public RootPaneTest() {
        initComponents();

        new DropTarget(fileField, new DropTargetAdapter() {
            @Override
            public void drop(DropTargetDropEvent evt) {
                if (evt.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    try {
                        List<File> files = null;
                        files = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                        setFile(files.isEmpty() ? null : files.get(0));
                    } catch (UnsupportedFlavorException | IOException e) {
                        evt.rejectDrop();
                    }
                } else {
                    evt.rejectDrop();
                }
            }
        });

        removeFileButton.addActionListener(e -> setFile(null));
    }

    private void setFile(File file) {
        fileField.setText(file == null ? null : file.getName());
        getRootPane().putClientProperty("Window.documentFile", file);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        windowModifiedCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        windowModifiedCheckBox.setText("Window Modified");
        windowModifiedCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                windowModifiedChanged(evt);
            }
        });

        windowModifiedLabel = new JLabel("Window Modified:");
        fileLabel = new JLabel("Window Document File:");

        removeFileButton = new JButton();
        removeFileButton.setText("Remove");

        fileField = new JTextField();
        fileField.setText("Drop a File here");
        fileField.setEditable(false);
        java.awt.GridBagConstraints gridBagConstraints;
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = GridBagConstraints.BASELINE_LEADING;
        add(windowModifiedLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = GridBagConstraints.BASELINE_LEADING;
        add(windowModifiedCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.BASELINE_LEADING;
        add(fileLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.BASELINE_LEADING;
        add(fileField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = GridBagConstraints.BASELINE_LEADING;
        add(removeFileButton, gridBagConstraints);

    }//GEN-END:initComponents

    private void windowModifiedChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_windowModifiedChanged
        JRootPane rootPane = SwingUtilities.getRootPane(this);
        if (rootPane != null) {
            rootPane.putClientProperty("windowModified", evt.getStateChange() == ItemEvent.SELECTED);
        }
    }//GEN-LAST:event_windowModifiedChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel windowModifiedLabel;
    private javax.swing.JCheckBox windowModifiedCheckBox;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileField;
    private javax.swing.JButton removeFileButton;
    // End of variables declaration//GEN-END:variables

}
